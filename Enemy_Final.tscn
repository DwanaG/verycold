[gd_scene load_steps=28 format=2]

[ext_resource path="res://object scenes/Bullet.tscn" type="PackedScene" id=1]
[ext_resource path="res://Models/enemy.escn" type="PackedScene" id=2]
[ext_resource path="res://enemy_material.tres" type="Material" id=3]
[ext_resource path="res://object scenes/Enemy Gun.tscn" type="PackedScene" id=4]
[ext_resource path="res://Audio/Gunshot_Shotgun_PSEF.151.wav" type="AudioStream" id=5]

[sub_resource type="GDScript" id=1]

script/source = "extends RigidBody

var state : String

export(float, 0, 100) var walk_speed
export(float, 0, 100) var run_speed
export(float, 0, 100) var accel

export(float, 0, 360) var fov
export(float, 0, 100) var view_range = 1000

export(float, 0, 10) var shoot_rate

export(PackedScene) var bullet_scene

export(bool) var debug

var close_plane = 0.5
var vertical_fov = 120

var states = [\"idle\", \"shooting\", \"moving_into_range\", \"chasing\"]

var isRunning : bool
var moveTarget : Transform
var head : Spatial
var headView : RayCast
var rotator : Spatial
var anim : AnimationTree
var muzzle : Position3D
var collider : CollisionShape
var gun_sound
var hit_sound

var frustum_planes = []

var playerCam;

var player_in_frustum = false
var player_raycast_success = false
var can_see_player = false
var geo
var path = []
var last_shot_time : int
var lastFrameState : String
var stop_moving = false

var target_facing
var move_towards
var last_player_pos

func _ready():
	state = \"idle\"
	generate_frustum()
	
	var player = get_tree().root.find_node(\"Player\", true, false)
	if player:
		playerCam = player.find_node(\"Camera\")
	
	head = find_node(\"Head Position\")
	headView = find_node(\"Head View\")
	rotator = find_node(\"Rotation\")
	geo = get_tree().root.find_node(\"geo\", true, false)
	anim = find_node(\"AnimationTree\")
	muzzle = find_node(\"Muzzle\")
	collider = get_node(\"Main Collider\")
	
	anim.tree_root.set_start_node(\"Idle\")
	
	var animPlayer = get_node(\"Rotation/Model/Root_Motion/AnimationPlayer\")
	animPlayer.get_animation(\"Idle\").loop = true
	animPlayer.get_animation(\"LookLeft\").loop = true
	animPlayer.get_animation(\"LookRight\").loop = true
	animPlayer.get_animation(\"Run\").loop = true
	animPlayer.get_animation(\"Walk\").loop = true
	animPlayer.get_animation(\"PointGun\").loop = true
	
	gun_sound = get_node(\"GunSound\")
	hit_sound = get_node(\"HitSound\")
	
func world_frustum():
	var planes = []
	for plane in frustum_planes:
		var new_plane = []
		for vertex in plane:
			new_plane.append(head.to_global(vertex))
		planes.append(new_plane)
	return planes

func is_inside_frustum(point : Vector3):
	var frust = world_frustum()
	for plane in frust:
		var a : Vector3 = plane[1] - plane[0]
		var b : Vector3 = plane[2] - plane[1]
		var normal = a.cross(b).normalized()
		if normal.dot(point - plane[0]) > 0:
			return false
	return true
	
func _process(_delta):
	if not is_inside_tree(): return
	var isInitial = lastFrameState != state
	lastFrameState = state
	match state:
		\"idle\":
			process_idle(isInitial)
		\"shooting\":
			process_shooting(isInitial)
		\"moving_into_range\":
			process_moving_into_range(isInitial)
		\"chasing\":
			process_chasing(isInitial)
		\"dead\":
			process_dead(isInitial)
			
func _physics_process(delta):
	if not is_inside_tree(): return
	if state == \"dead\": return
	
	can_see_player = get_can_see_player()
	if path and path.size() > 0:
		move_along_path()
	if target_facing:
		rotate_towards_point(target_facing, 90, delta)
		
func get_can_see_player():
	if not playerCam: return false
	var playerPos = playerCam.global_transform.origin
	if is_inside_frustum(playerPos):
		var toPlayer = playerCam.global_transform.origin - headView.global_transform.origin
		var relativeToRotation = headView.global_transform.basis.inverse().xform(toPlayer)
		headView.cast_to = relativeToRotation
		if headView.is_colliding():
			var collider = headView.get_collider()
			if collider.filename == \"res://Player.tscn\":
				return true
	return false
	
func process_idle(_isInitial):
	target_facing = null
	stop_moving = true

	anim.set_dual(\"shooting\", false)
	anim.set_dual(\"moving\", false)

	if can_see_player:
		state = \"shooting\"
	
func process_shooting(isInitial):
	anim.set_dual(\"shooting\", can_see_player)
	
	target_facing = playerCam.global_transform.origin
	last_player_pos = playerCam.global_transform.origin
	
	if not can_see_player:
		set_path_to_point(last_player_pos)
		state = \"chasing\"
		return
	
	stop_moving = true
	if isInitial:
		last_shot_time = OS.get_ticks_msec() \\
			- (shoot_rate * 1000) \\
			+ ((shoot_rate * 1000) / 2.0)
	
	var now = OS.get_ticks_msec()
	if now > last_shot_time + ( shoot_rate * 1000 ):
		get_node(\"GunSound\").pitch_scale = Engine.time_scale
		gun_sound.play()
		shoot()	

func shoot():
	last_shot_time = OS.get_ticks_msec()
	var bullet = bullet_scene.instance()
	get_node(\"/root/Game\").level_add(bullet);
	
	var basis = muzzle.global_transform.basis;
	var position = muzzle.global_transform.origin;
	
	bullet.global_transform.origin = muzzle.global_transform.origin
	
	var playerCamPos = playerCam.global_transform.origin
	var horizSpread = 0.5
	var vertSpread = 2
	
	var toPlayer = (playerCamPos - position).normalized()
	var gunPoint = -basis.z.normalized()
	
	var targetPoint = Vector3(
		playerCamPos.x + rand_range(-horizSpread, horizSpread),
		playerCamPos.y - rand_range(0, vertSpread),
		playerCamPos.z + rand_range(-horizSpread, horizSpread))
	
	if gunPoint.dot(toPlayer) > 0.7:
		var look = muzzle.global_transform.looking_at(targetPoint, Vector3.UP)
		bullet.global_transform.basis = Basis(
			-look.basis.x.normalized(), look.basis.y.normalized(), -look.basis.z.normalized())
	else:
		bullet.global_transform.basis = Basis(
			-basis.x.normalized(), basis.y.normalized(), -basis.z.normalized())
	
	anim.set(\"parameters/Shooting/OneShot/active\", true)
	bullet.start()
	
func process_moving_into_range(_isInitial):
	anim.set_dual(\"moving\", !can_see_player)
	
func process_chasing(_isInitial):
	isRunning = true
	stop_moving = false
	anim.set_dual(\"moving\", !can_see_player)
	anim.set(\"parameters/Moving/WalkRun/blend_amount\", 1 if isRunning else 0)
	
	if can_see_player:
		state = \"shooting\"
		path = null
		return
	
	if not path or path.size() == 0:
		state = \"idle\"
		return

func process_dead(isInitial):
	if isInitial:
		get_node(\"/root/Game\").slomo(2, 0.5)
		mode = RigidBody.MODE_RIGID
		set_collision_layer_bit(0, false)
		# TODO ragdoll
	
func set_path_to_point(point: Vector3):
	var nav : Navigation = get_tree().root.find_node(\"Navigation\", true, false)
	if not nav: return
	
	var targetNavPoint = nav.get_closest_point(point)
	var closestCurrentPoint = nav.get_closest_point(global_transform.origin)
	
	path = nav.get_simple_path(closestCurrentPoint, targetNavPoint)
	
func signed_angle(a, b, axis):
	a = a.normalized()
	b = b.normalized()
	return acos(a.dot(b)) * sign(axis.dot(a.cross(b)))
	
func rotate_towards_point(point : Vector3, degreesPerSecond: float, delta: float):
	var facing = rotator.global_transform.basis.z
	var flatVectorToTarget = Vector3(point.x - rotator.global_transform.origin.x, 0, point.z - rotator.global_transform.origin.z).normalized()
	var toTravel = signed_angle(facing, flatVectorToTarget, Vector3.UP)
	toTravel = min(abs(toTravel), deg2rad(degreesPerSecond) * delta) * sign(toTravel)
	var current = Quat(rotator.global_transform.basis)
	var new = Quat(Vector3.UP, toTravel)
	rotator.global_transform.basis = Basis(current * new)
	
func move_along_path():
	if not path or path.size() == 0: return
	
	var targetPathNode : Vector3 = path[0]
	var floorPos = global_transform.origin + (Vector3.DOWN * (collider.shape.height / 2))
	
	var toPoint = floorPos - targetPathNode
	
	if toPoint.length_squared() < 0.5: # Reached a nav point
		path.remove(0)
		if path.size() == 0:
			return # Arrived
			
		targetPathNode = path[0]
	
	target_facing = targetPathNode
	move_towards = targetPathNode
	
func _integrate_forces(state):
	if not move_towards: return
	if self.state == \"dead\": return
	
	var toPoint = move_towards - global_transform.origin
	var flatToPoint = Vector3(toPoint.x, 0, toPoint.z)
	
	state.add_central_force(flatToPoint.normalized() * accel)
	
	# Cap horizontal linear velocity
	var maxSpeed = run_speed if isRunning else walk_speed
	if Vector2(state.linear_velocity.x, state.linear_velocity.z).length_squared() > maxSpeed * maxSpeed:
		var new = Vector2(state.linear_velocity.x, state.linear_velocity.z).normalized() * maxSpeed
		state.linear_velocity = Vector3(new.x, state.linear_velocity.y, new.y)
		
	var max_stop_speed = 0.5 * state.step
	if stop_moving:
		state.linear_velocity = Vector3(
			state.linear_velocity.x - min(state.linear_velocity.x, max_stop_speed),
			state.linear_velocity.y,
			state.linear_velocity.x - min(state.linear_velocity.x, max_stop_speed))
			
	
func generate_frustum():
	var camUp = Vector3.UP
	var camRight = Vector3.RIGHT
	var nearCenter = Vector3.BACK * close_plane
	var farCenter = Vector3.BACK * view_range
	
	var nearHeight = 2 * tan(deg2rad(vertical_fov / 2.0)) * close_plane
	var farHeight = 2 * tan(deg2rad(vertical_fov / 2.0)) * view_range
	
	var nearWidth = 2 * tan(deg2rad(fov / 2.0)) * close_plane
	var farWidth = 2 * tan(deg2rad(fov / 2.0)) * view_range
	
	var farTopLeft = farCenter + camUp * (farHeight*0.5) - camRight * (farWidth*0.5);
	var farTopRight = farCenter + camUp * (farHeight*0.5) + camRight * (farWidth*0.5);
	var farBottomLeft = farCenter - camUp * (farHeight*0.5) - camRight * (farWidth*0.5);
	var farBottomRight = farCenter - camUp * (farHeight*0.5) + camRight * (farWidth*0.5);

	var nearTopLeft = nearCenter + camUp * (nearHeight*0.5) - camRight * (nearWidth*0.5);
	var nearTopRight = nearCenter + camUp * (nearHeight*0.5) + camRight * (nearWidth*0.5);
	var nearBottomLeft = nearCenter - camUp * (nearHeight*0.5) - camRight * (nearWidth*0.5);
	var nearBottomRight = nearCenter - camUp * (nearHeight*0.5) + camRight * (nearWidth*0.5);
	
	var left = [farTopLeft, nearTopLeft, nearBottomLeft, farBottomLeft]
	var right = [farTopRight, farBottomRight, nearBottomRight, nearTopRight]
	var top = [farTopLeft, farTopRight, nearTopRight, nearTopLeft]
	var bottom = [farBottomRight, farBottomLeft, nearBottomLeft, nearBottomRight]
	var front = [nearTopLeft, nearTopRight, nearBottomRight, nearBottomLeft]
	var back = [farTopRight, farTopLeft, farBottomLeft, farBottomRight]
	
	frustum_planes = [left, right, top, bottom, front, back]

func _on_Enemy_body_entered(body):
	if body.filename == \"res://Flying Gun.tscn\":
		if(state != \"dead\"):
			hit_sound.play()
		state = \"dead\"
"

[sub_resource type="CapsuleShape" id=2]

radius = 0.383281
height = 2.58835

[sub_resource type="AnimationNodeAnimation" id=3]

filter_enabled = false
filters = [  ]
animation = "Idle"

[sub_resource type="AnimationNodeAnimation" id=4]

resource_local_to_scene = true
filter_enabled = false
filters = [  ]
animation = "Run"

[sub_resource type="AnimationNodeAnimation" id=5]

resource_local_to_scene = true
filter_enabled = false
filters = [  ]
animation = "PointGun"

[sub_resource type="AnimationNodeAnimation" id=6]

resource_local_to_scene = true
filter_enabled = false
filters = [  ]
animation = "Walk"

[sub_resource type="AnimationNodeBlend2" id=7]

resource_local_to_scene = true
filter_enabled = true
filters = [ "Skeleton:enemy_l_clavicle_jnt", "Skeleton:enemy_l_elbow_jnt", "Skeleton:enemy_l_finger0_01", "Skeleton:enemy_l_finger0_02", "Skeleton:enemy_l_finger0_03", "Skeleton:enemy_l_finger1_01", "Skeleton:enemy_l_finger1_02", "Skeleton:enemy_l_finger1_03", "Skeleton:enemy_l_finger2_01", "Skeleton:enemy_l_finger2_02", "Skeleton:enemy_l_shoulder_jnt", "Skeleton:enemy_l_wrist_jnt", "Skeleton:enemy_r_clavicle_jnt", "Skeleton:enemy_r_elbow_jnt", "Skeleton:enemy_r_finger0_01", "Skeleton:enemy_r_finger0_02", "Skeleton:enemy_r_finger0_03", "Skeleton:enemy_r_finger1_01", "Skeleton:enemy_r_finger1_02", "Skeleton:enemy_r_finger1_03", "Skeleton:enemy_r_finger2_01", "Skeleton:enemy_r_finger2_02", "Skeleton:enemy_r_shoulder_jnt", "Skeleton:enemy_r_wrist_jnt" ]
sync = true

[sub_resource type="AnimationNodeBlend2" id=8]

resource_local_to_scene = true
filter_enabled = false
filters = [  ]
sync = true

[sub_resource type="AnimationNodeBlendTree" id=9]

resource_local_to_scene = true
graph_offset = Vector2( -380, 34 )
nodes/Animation/node = SubResource( 6 )
nodes/Animation/position = Vector2( -200, 0 )
"nodes/Animation 2/node" = SubResource( 4 )
"nodes/Animation 2/position" = Vector2( -200, 180 )
"nodes/Animation 3/node" = SubResource( 5 )
"nodes/Animation 3/position" = Vector2( 120, 300 )
nodes/PointGun/node = SubResource( 7 )
nodes/PointGun/position = Vector2( 380, 140 )
nodes/WalkRun/node = SubResource( 8 )
nodes/WalkRun/position = Vector2( 160, 60 )
nodes/output/position = Vector2( 600, 100 )
node_connections = [ "output", 0, "PointGun", "PointGun", 0, "WalkRun", "PointGun", 1, "Animation 3", "WalkRun", 0, "Animation", "WalkRun", 1, "Animation 2" ]
_sections_unfolded = [ "Resource", "Script" ]

[sub_resource type="AnimationNodeAnimation" id=10]

filter_enabled = false
filters = [  ]
animation = "Fire"

[sub_resource type="AnimationNodeAnimation" id=11]

filter_enabled = false
filters = [  ]
animation = "PointGun"

[sub_resource type="AnimationNodeOneShot" id=12]

filter_enabled = false
filters = [  ]
fadein_time = 0.1
fadeout_time = 0.5
autorestart = false
autorestart_delay = 1.0
autorestart_random_delay = 0.0
sync = false

[sub_resource type="AnimationNodeBlendTree" id=13]

graph_offset = Vector2( -294, 94 )
nodes/Animation/node = SubResource( 11 )
nodes/Animation/position = Vector2( -20, 60 )
"nodes/Animation 2/node" = SubResource( 10 )
"nodes/Animation 2/position" = Vector2( 0, 220 )
nodes/OneShot/node = SubResource( 12 )
nodes/OneShot/position = Vector2( 280, 120 )
nodes/output/position = Vector2( 560, 120 )
node_connections = [ "output", 0, "OneShot", "OneShot", 0, "Animation", "OneShot", 1, "Animation 2" ]

[sub_resource type="AnimationNodeStateMachineTransition" id=14]

switch_mode = 0
auto_advance = false
advance_condition = "moving"
xfade_time = 0.5
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=15]

switch_mode = 0
auto_advance = false
advance_condition = "not_moving"
xfade_time = 0.2
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=16]

switch_mode = 0
auto_advance = false
advance_condition = "not_shooting"
xfade_time = 0.5
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=17]

switch_mode = 0
auto_advance = false
advance_condition = "shooting"
xfade_time = 0.2
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=18]

switch_mode = 0
auto_advance = false
advance_condition = "moving"
xfade_time = 0.5
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachineTransition" id=19]

switch_mode = 0
auto_advance = false
advance_condition = "shooting"
xfade_time = 0.2
priority = 1
disabled = false

[sub_resource type="AnimationNodeStateMachine" id=20]

resource_local_to_scene = true
states/Idle/node = SubResource( 3 )
states/Idle/position = Vector2( 422, 157 )
states/Moving/node = SubResource( 9 )
states/Moving/position = Vector2( 184, 191 )
states/Shooting/node = SubResource( 13 )
states/Shooting/position = Vector2( 312, 326 )
transitions = [ "Idle", "Moving", SubResource( 14 ), "Moving", "Idle", SubResource( 15 ), "Shooting", "Idle", SubResource( 16 ), "Idle", "Shooting", SubResource( 17 ), "Shooting", "Moving", SubResource( 18 ), "Moving", "Shooting", SubResource( 19 ) ]
start_node = ""
end_node = ""
graph_offset = Vector2( -200, 115 )
_sections_unfolded = [ "Script" ]

[sub_resource type="AnimationNodeStateMachinePlayback" id=21]

resource_local_to_scene = true

[sub_resource type="GDScript" id=22]

script/source = "extends AnimationTree

var triggers = []
var triggers_del = []
	
func _process(_delta):
	# Triggers expire after one frame
	for trigger in triggers_del:
		set(trigger, false)
	triggers_del.clear()
	
	for trigger in triggers:
		triggers_del.append(trigger)
	triggers.clear()
	
func set_param(name: String, value: bool):
	set(\"parameters/conditions/\" + name, value)
	
func set_dual(name : String, value : bool):
	set_param(name, value)
	set_param(\"not_\" + name, !value)
	
func set_trigger(name):
	set_param(name, true)
	triggers.append(name)"

[node name="Enemy" type="RigidBody"]
input_ray_pickable = true
input_capture_on_drag = false
collision_layer = 1
collision_mask = 1
mode = 2
mass = 1.0
friction = 1.0
bounce = 0.0
physics_material_override = null
gravity_scale = 1.0
custom_integrator = false
continuous_cd = false
contacts_reported = 5
contact_monitor = true
sleeping = false
can_sleep = true
axis_lock_linear_x = false
axis_lock_linear_y = false
axis_lock_linear_z = false
axis_lock_angular_x = false
axis_lock_angular_y = false
axis_lock_angular_z = false
linear_velocity = Vector3( 0, 0, 0 )
linear_damp = -1.0
angular_velocity = Vector3( 0, 0, 0 )
angular_damp = -1.0
script = SubResource( 1 )
_sections_unfolded = [ "Angular", "Axis Lock", "Collision", "Linear", "Matrix", "Transform", "Visibility", "bullet_scene", "physics_material_override" ]
walk_speed = 2.0
run_speed = 10.0
accel = 30.0
fov = 120.0
view_range = 50.0
shoot_rate = 1.1
bullet_scene = ExtResource( 1 )
debug = null

[node name="Main Collider" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0 )
shape = SubResource( 2 )
disabled = false
_sections_unfolded = [ "Transform", "shape" ]

[node name="Rotation" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.58755, 0 )
_sections_unfolded = [ "Transform" ]

[node name="Head Position" type="Position3D" parent="Rotation"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.96192, 0 )
_sections_unfolded = [ "Transform" ]

[node name="Head View" type="RayCast" parent="Rotation/Head Position"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.420604 )
enabled = true
exclude_parent = true
cast_to = Vector3( 0, 0, 100 )
collision_mask = 5
collide_with_areas = false
collide_with_bodies = true
_sections_unfolded = [ "Collide With" ]

[node name="Model" parent="Rotation" instance=ExtResource( 2 )]
_sections_unfolded = [ "Transform" ]

[node name="AnimationTree" type="AnimationTree" parent="Rotation/Model/Root_Motion" index="0"]
tree_root = SubResource( 20 )
anim_player = NodePath("../AnimationPlayer")
active = true
process_mode = 1
root_motion_track = NodePath("")
parameters/playback = SubResource( 21 )
parameters/conditions/moving = false
parameters/conditions/not_moving = false
parameters/conditions/not_shooting = false
parameters/conditions/shooting = false
parameters/Moving/PointGun/blend_amount = 0
parameters/Moving/WalkRun/blend_amount = 1.0
parameters/Shooting/OneShot/active = false
script = SubResource( 22 )
_sections_unfolded = [ "Root Motion", "Script", "parameters", "parameters/Move", "parameters/Move/PointGun", "parameters/Move/WalkRun", "parameters/Moving", "parameters/Moving/PointGun", "parameters/Moving/WalkRun", "parameters/Shooting", "parameters/Shooting/OneShot", "parameters/conditions", "tree_root" ]

[node name="Skeleton" parent="Rotation/Model/Root_Motion" index="2"]
transform = Transform( 0.18, 0, 0, 0, -7.86805e-09, -0.18, 0, 0.18, -7.86805e-09, 0, -0.0703342, 0 )
_sections_unfolded = [ "Transform" ]

[node name="Model" parent="Rotation/Model/Root_Motion/Skeleton" index="0"]
material/0 = ExtResource( 3 )
_sections_unfolded = [ "material" ]

[node name="Right Hand" type="BoneAttachment" parent="Rotation/Model/Root_Motion/Skeleton" index="1"]
transform = Transform( 0.0912149, -3.42727e-07, 0.995832, 7.09668e-07, 1, -5.69969e-07, -0.995831, 1.76835e-07, 0.0912147, -8.40339, 0.131256, -14.0743 )
bone_name = "enemy_r_finger1_01"
_sections_unfolded = [ "Transform" ]

[node name="Enemy Gun" parent="Rotation/Model/Root_Motion/Skeleton/Right Hand" instance=ExtResource( 4 )]
transform = Transform( 0.87625, -2.9392e-07, 8.84756e-09, 4.84433e-08, 0.876252, 7.45058e-09, 6.0536e-09, -6.33299e-08, 0.876257, -0.419496, -1.05176, 0.000445843 )

[node name="Muzzle" type="Position3D" parent="Rotation/Model/Root_Motion/Skeleton/Right Hand/Enemy Gun"]
transform = Transform( 1, -7.3429e-08, 8.84756e-09, 5.44242e-09, 1, -7.45058e-09, 6.0536e-09, -3.35276e-08, 1, -0.0872133, 1.60302, -2.02155 )
_sections_unfolded = [ "Transform" ]

[node name="Left Hand" type="BoneAttachment" parent="Rotation/Model/Root_Motion/Skeleton" index="2"]
transform = Transform( 0.0912159, 2.57045e-07, -0.995831, -5.69504e-07, 1, -5.88596e-07, 0.995831, 1.12923e-06, 0.0912166, 8.40338, 0.131256, -14.0743 )
bone_name = "enemy_l_finger1_01"

[node name="Head" type="BoneAttachment" parent="Rotation/Model/Root_Motion/Skeleton" index="3"]
transform = Transform( -4.42011e-08, -1, 7.19446e-14, 0.9958, -4.40232e-08, -0.0915605, 0.0915605, -4.72084e-09, 0.9958, -4.64378e-14, -0.271964, -15.9156 )
bone_name = "enemy_head_jnt"
_sections_unfolded = [ "Transform" ]

[node name="GunSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = 0.0
pitch_scale = 1.0
autoplay = false
stream_paused = false
mix_target = 0
bus = "Master"

[node name="HitSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = 0.0
pitch_scale = 0.2
autoplay = false
stream_paused = false
mix_target = 0
bus = "Master"

[connection signal="body_entered" from="." to="." method="_on_Enemy_body_entered"]

[editable path="Rotation/Model"]
